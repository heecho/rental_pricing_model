Overview:
The rental price generator module can be used to generate a recommended listing price for a new rental. The module takes in a set of required criteria for each new listing: listing title, number of bedrooms, number of bathrooms, and total square footage.

Requirements:
**
This module requires the NumPy library. Please make sure to install NumPy before running:
https://docs.scipy.org/doc/numpy/user/install.html
**

Running the module:
From your terminal, navigate to the directory that contains rental_price_generator.py. Use the command ‘python’ and type the file name ‘rental_price_generator.py’ to run the program.
i.e.: price_directory $ python rental_price_generator.py

**
The first time you run the program, a set of historical pricing data will be written to a local database. You should see the success message ‘Import Rental Listing Data To DB: Complete’ displayed in your terminal.
**

You will then be prompted to enter the criteria for each listing, beginning with listing title. Press the return/enter key to continue to the next question. After entering listing title, number of bedrooms, number of bathrooms, and total square footage for your first listing, you will be asked if you would like to price another listing. Enter ‘Y’ or ‘yes’ to continue, or ’N’ or ‘no’ to end the program.

A dictionary will be displayed containing the title of each of your new listings, paired with the recommended listing price.

The Pricing Model:
Your recommended listing price will be generated by comparing your new rental criteria to similar listings and calculating an average price from that subset of data. If no similar listings are found, the returned price will be calculated using an average price per bedroom across the entire set of historical data.

Testing the module:
From your terminal, navigate to the directory that contains rental_price_generator_test.py. Use the command ‘python’ and type the file name ‘rental_price_generator_test.py’ to run the program.
i.e.: price_directory $ python rental_price_generator_test.py

When the tests have completed, the results will be displayed in the terminal.
Success looks like:
Ran 8 tests in 0.005s
OK

If a test fails, you will see an output similar to the example below:
Ran 8 tests in 0.003s
FAILED (failures=1)

**
The following tests will fail if the database has not been created:
test_rec_price_for_no_match
test_rec_price_for_similar_listing
**
